name: PR validation for CAMARA Project
# A reusable action for validating PRs using tools configuration from branch indicated by input `configurations` variable

on:
  workflow_call:
    # For a workflow to be reusable, the values for on must include workflow_call
    inputs:
      configurations:
        description: The branch, tag, or commit to check out - containing tool configs to be used
        type: string
        required: false
        default: main
        
env: # Comment env block if you do not want to apply fixes
  # Apply linter fixes configuration
  APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool)
  APPLY_FIXES_EVENT: pull_request # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all)
  APPLY_FIXES_MODE: commit # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request)

jobs:
  general:
    name: MegaLinter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
      - name: Checkout linting config
        uses: actions/checkout@v4
        with:
          repository: rartych/xCAMARA-tooling
          path: lint-config
          ref: ${{ inputs.configurations }}
          sparse-checkout: |
            linting/config/
          sparse-checkout-cone-mode: false
      - name: Copy specified folder to workspace root
        run: cp -RT ${{ github.workspace }}/lint-config/linting/config ${{ github.workspace }}
      - name: MegaLinter
        id: ml
        # You can override MegaLinter flavor used to have faster performances
        # c_cpp MegaLinter Flavor https://megalinter.io/latest/flavors/c_cpp/ includes all needed linters
        uses: oxsecurity/megalinter/flavors/c_cpp@v8
        # configuration of Megalinter
        env:
          VALIDATE_ALL_CODEBASE: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRINT_ALPACA: false
          # LINTER_RULES_PATH: ${{ github.workspace }}/lint-config/linting/config
          DISABLE: COPYPASTE,SPELL,JAVASCRIPT,MARKDOWN
          DISABLE_LINTERS: YAML_PRETTIER,REPOSITORY_GRYPE,REPOSITORY_SEMGREP,REPOSITORY_DEVSKIM,REPOSITORY_KICS,REPOSITORY_TRIVY,REPOSITORY_TRIVY_SBOM,REPOSITORY_TRUFFLEHOG,REPOSITORY_CHECKOV,REPOSITORY_GITLEAKS,YAML_V8R,JAVA_PMD
          API_SPECTRAL_CONFIG_FILE: .spectral.yaml
          YAML_YAMLLINT_CONFIG_FILE: .yamllint.yaml
          GHERKIN_GHERKIN_LINT_CONFIG_FILE: .gherkin-lintrc
          API_SPECTRAL_FILTER_REGEX_INCLUDE: (code/API_definitions/)
          YAML_YAMLLINT_FILTER_REGEX_INCLUDE: (code/API_definitions/)
          GHERKIN_GHERKIN_LINT_FILTER_REGEX_INCLUDE: (code/Test_definitions/)
      - name: Archive production artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: MegaLinter reports
          include-hidden-files: "true"
          path: |
            megalinter-reports
            mega-linter.log
